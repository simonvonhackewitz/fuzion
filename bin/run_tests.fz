# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code run_tests script
#
# -----------------------------------------------------------------------


########### Extensions ###############

# helper to get out, err, exit_code from started process
#
p_res(p os.process,
      # the command, for error messages
      cmd String) (String, String, u32) =>
  lm : mutate is
  lm ! ()->
    match p.with_out String lm (()->String.from_bytes (io.buffered lm).read_fully)
      e error => panic "failed reading stdout from $cmd, error is: $e"
      out String =>
        match p.with_err String lm (()->String.from_bytes (io.buffered lm).read_fully)
          e error => panic "failed reading stderr from $cmd, error is: $e"
          err String =>
            match p.wait
              e error => panic "failed waiting for $cmd, error is: $e"
              ec u32 => (out, err, ec)

# execute this Sequence of process+args
# return what we read from stdout as the result
#
Sequence.prefix ! =>
  seq := map x->x.as_string
  match os.process.start seq.first.val (seq.drop 1) (container.ordered_map ["PATH"] [(envir.vars.get "PATH").val])
    e error => panic "failed executing {Sequence.this}, error is $e"
    p os.process => p_res p Sequence.this.as_string


# feed this string to a new process
# return what we read from stdout as the result
#
String.infix | (seq Sequence String) =>

  lm : mutate is
  lm ! ()->
    match os.process.start seq.first.val (seq.drop 1) (container.ordered_map ["PATH"] [(envir.vars.get "PATH").val])
      e error => panic "failed executing $seq, error is $e"
      p os.process =>
        _ := p.with_in unit lm ()->
          _ := (io.buffered lm).writer.env.write String.this.utf8
          _ := (io.buffered lm).writer.env.flush
          _ := p.close_in
        p_res p seq.as_string


# execute this string by splitting at all whitespaces
# return what we read from stdout as the result
#
String.prefix !! =>
  !split

# NYI: UNDER DEVELOPMENT: move to base library?
io.buffered.writer.write_string(str String) =>
  write str.utf8


########### run_tests ###############


main =>

  if (envir.args.count != 3)
    say "wrong argument count {envir.args.count}"
  else
    build_dir := envir.args[1]
    target := envir.args[2]
    # NYI: port to fuzion
    tests := (((!!"find $build_dir/tests -name Makefile -print0").0 | ["xargs", "--null", "--max-args=1", "dirname"]).0 | ["sort"])
      .0
      .split

    _ := io.file.delete "$build_dir/run_tests.results"
    _ := io.file.delete "$build_dir/run_tests.failures"

    say "{tests.count} tests."

    start_time_total := time.nano.read

    lm : mutate is
    lm2 : mutate is
    lm ! ()->
      lm2 ! ()->
        _ := io.file.use unit lm "$build_dir/run_tests.results" io.file.mode.write ()->
          _ := io.file.use unit lm2 "$build_dir/run_tests.failures" io.file.mode.write ()->

            append_line(T type: mutate, str String) =>
              check !((io.buffered T).writer.env.write_string "$str\n").error.is_error

            for test in tests do
              if io.file.exists "$test/skip" || io.file.exists "$test/skip_$target"
                yak "_"
                append_line lm "$test: skipped"
              else

                start_time := time.nano.read
                res := !!"timeout --kill-after=600s 600s make $target --environment-overrides --directory=$test"
                end_time := time.nano.read

                if res.2 = 0 then
                  yak "."
                  append_line lm "$test in {end_time-start_time}: ok"
                else
                  yak "#"
                  say res.0
                  say res.1
                  append_line lm "$test in {end_time-start_time}: failed"
                  append_line lm2 res.0
                  append_line lm2 res.1

    end_time_total := time.nano.read

    lm ! ()->
      _ := io.file.use unit lm "$build_dir/run_tests.results" io.file.mode.read ()->

        results := (String.from_bytes (io.buffered lm).read_fully).split.as_array
        ok := results
          .filter (str -> str.ends_with "ok")
          .count
        skipped := results
          .filter (str -> str.ends_with "skipped")
          .count
        failed := results
          .filter (str -> str.ends_with "failed")
          .count

        say " $ok/{tests.count} tests passed, $skipped skipped, $failed failed in {end_time_total-start_time_total}."

        if failed > 0
        exit 1

_ := main
