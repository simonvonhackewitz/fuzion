# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature OpenType
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# OpenType -- parent feature of type used for open types
#
# This is the parent feature of the result type of fields with open
# type such as `tuple.values` if called without selecting a particular
# variant such as `tuple.values.2`.
#
# The OpenType value inherits from `TypedSequence` permitting access to
# the types and values of the individual fields
#
module:public OpenType ref : TypedSequence is


  # name of this open type, NYI: what does this look like exactly?
  #
  public name String => "NYI: `OpenType.name` should be intrinsic"


  # string representation of this type to be used for debugging.
  #
  # result has the form "OpenType '<name>'", but this might change in the future
  #
  public redef as_string String => "#### OpenType '$name' ####"


  # fold the actual fields created for a field whose type is an open type parameter
  # using the given function and initial value.
  #
  # In case the actual open type parameter list is empty, the result is `e`.
  #
  public redef foldf(B type, A type : TypedApplicator B, e B, a A) B
  =>

    autogenerated_code_for_OpenType_fold B A e a
  /* the auto-generated code for `tuple String f64 bool` looks as follows:

    a.apply bool (
      a.apply f64 (
        a.apply String (
          e
                       ) values.0
                  ) values.1
                 ) values.2

   */


# magic intrinsic used by middle end to create code for `foldf`, see above.
#
private autogenerated_code_for_OpenType_fold(B type,
                                             A type : TypedApplicator B,
                                             e B,
                                             a A) B => intrinsic
