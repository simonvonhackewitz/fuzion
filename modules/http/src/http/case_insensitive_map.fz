# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature case_insensitive_map
#
# -----------------------------------------------------------------------


# A map with case insensitive String keys, used for the header fields in HTTP messages
#
private:public case_insensitive_map(internal_map container.Map String String) : container.Map String String is

  public redef add(k String, v String) container.Map String String => add_as_lower_case k v

  module add_as_lower_case(k String, v String) case_insensitive_map =>
    case_insensitive_map (internal_map.add k.lower_case v)

  # number of entries in this map
  #
  public redef size i32 => internal_map.size

  # get the value k is mapped to, or nil if none.
  #
  public redef index [] (k String) option String => internal_map[k.lower_case]

  # get a sequence of all key/value pairs in this map
  #
  public redef items Sequence (tuple String String) => internal_map.items

  # create a mutable map from this
  #
  public redef as_mutable_map(LM type : mutate) container.Mutable_Map String String => internal_map.as_mutable_map LM


  # initializer for this map
  #
  # every map implementation needs to implement this
  #
  public redef fixed type.empty http.case_insensitive_map => http.case_insensitive_map(container.ordered_map String String .empty)

  module type.from_map(m container.Map String String) http.case_insensitive_map =>
    map_of m.items

  module type.map_of(kvs Sequence (tuple String String)) http.case_insensitive_map =>

    http.case_insensitive_map (container.ordered_map (kvs.map (.0.lower_case)) (kvs.map (.1)))
