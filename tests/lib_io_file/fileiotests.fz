# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of tests for File I/O operations
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

fileiotests =>

  dir := "testdir"
  newdir := "newdir"
  file := dir + "/" + "testfile"

  content := "Hello world 🌍"

  f => io.file

  say "$dir exists: {f.exists dir}"
  _ := (io.dir.make dir).bind unit _->
    say "$dir was created"
  say "$dir exists: {f.exists dir}"

  say "$file exists: {f.exists file}"

  _ := f
    .use unit file io.file.mode.write (()->io.file.open.write content.utf8)
    .bind unit (_ -> say "$file was created")
  say "$file exists: {f.exists file}"

  say "stat resolve=true : $file size is {(f.stat file true).val.size}"
  say "stat resolve=false: $file size is {(f.stat file false).val.size}"

  _ := f.use unit file io.file.mode.read ()->
    say io.file.open.file_position
    say (io.file.open.seek 1)
    say io.file.open.file_position
    say (io.file.open.seek 0)


  _ := f.use (array u8) file io.file.mode.read ()->io.file.open.read
    .bind unit bytes->
      filecontent := String.from_bytes bytes
      say "file content bytes: $bytes"
      say "file content is $filecontent"

  _ := f.delete file
    .bind unit (_-> say "$file was deleted")
  say "$file exists: {f.exists file}"

  say "$dir exists: {f.exists dir}"
  say "$newdir exists: {f.exists newdir}"
  _ := f.move dir newdir
    .bind unit (_ -> say "$dir is now: $newdir")
  say "$newdir exists: {f.exists newdir}"
  say "$dir exists: {f.exists dir}"

  _ := f.delete newdir
    .bind unit (_ -> say "$newdir was deleted")
  say "$newdir exists: {f.exists newdir}"
