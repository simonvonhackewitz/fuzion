# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test reg_issue5252
#
# -----------------------------------------------------------------------

# various tests for postfix and infix operators
#
reg_issue5252 =>

  i32.postfix ++ i32 -> i32 => *7
  f64.infix +*+ (f u32 -> String) =>
    say (f 12345)
    "infix +*+ done."

  say (123++          .call 2 )
  say (123.postfix ++ .call 3 )
  say (123.postfix ++      (4))
  say (123.postfix ++       5 )
  say (123.0 +*+ _->"hi"      )
  say (123.0 +*+ .bin         )
#  say (123.0+*+ .hex          )    # should fail, and does so

  say (123.0+456)
  say (123.0 + 456)
  say (123.0+ 456)   # should fail
  say (123.0 +456)   # should fail

  a := 47
  b := 11
  a(x i32) => say "a $x"
  i32.postfix - i32->i32 => x->x-val
  i32.postfix -- i32->i32 => -val

  say (a-b)            # 36
  say (a - b)          # 36
  say (a- b)           # NYI: should print -36, does not work yet!
#  say (a-- b)          # NYI: should print -36, does not work yet!
  say ((a-).call b)    # -36
  say ((a--).call b)   # -36
  say (a -b)           #  a -11

  f i32->i32 => 100+
  g i32->i32 => +(1000)
#   h i32->i32 => -99   # NYI: does not work yet!
#   i i32->i32 := -99   # NYI: does not work yet!
  j(jf i32->i32) => say "j: {jf 123}"
  j -999

  say (f  +3)  # should print 103
  say (g +33)  # should print 1033
